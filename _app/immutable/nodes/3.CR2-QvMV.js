import"../chunks/Bg9kRutz.js";import"../chunks/69_IOA4Y.js";import{S as e,T as f,U as i,V as o,W as u}from"../chunks/k7iXlUI8.js";import{t as b,a as s,b as l}from"../chunks/CP3h-6DZ.js";import{O as se}from"../chunks/hhJWkrrF.js";import{O as x,I as m,L as v}from"../chunks/mi0lPKVW.js";import{C as n}from"../chunks/DBMAbNen.js";var ie=b("<!> <!> <!> <!>",1),ue=b("<!> <!> <!> <!> <!>",1),$e=b("<!> <!> <!> <!> <!>",1),he=b("<!> <!> <!> <!>",1),ye=b('<h1 class="svelte-1gyo6pc">Well Formed JSON</h1> <p class="svelte-1gyo6pc">Разработчик сам решает, какой JSON будет считаться правильным, а какой нет. Но есть общие правила, которые нельзя нарушать. Наш JSON должен быть well formed, то есть синтаксически корректный.</p> <p class="svelte-1gyo6pc">Чтобы проверить JSON на синтаксис, можно использовать любой JSON Validator (так и гуглите). Я рекомендую сайт <!>. Там есть сам валидатор + описание типичных ошибок с примерами.</p> <p class="svelte-1gyo6pc">Но учтите, что парсеры внутри кода работают не по википедии или w3schools, а по RFC, стандарту. Так что если хотите изучить «каким должен быть JSON», то правильнее открывать RFC и искать там <!>. Однако простому тестировщику хватит набора типовых правил с w3schools, их и разберем.</p> <p class="svelte-1gyo6pc">Правила well formed JSON:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <h2 id="data" class="svelte-1gyo6pc">1. Данные написаны в виде пар «ключ:значение»</h2> <p class="svelte-1gyo6pc">Например, так:</p> <!> <p class="svelte-1gyo6pc">В JSON название ключа нужно брать в кавычки, в JavaScript не обязательно — он и так знает, что это строка. Если мы тестируем API, то там будет именно JSON, так что кавычки обычно нужны.</p> <p class="svelte-1gyo6pc">Но учтите, что это правило касается JSON-объекта. Потому что json может быть и числом, и строкой. То есть:</p> <!> <p class="svelte-1gyo6pc">Или</p> <!> <p class="svelte-1gyo6pc">Это тоже корректный json, хоть и не в виде пар «ключ:значение».</p> <p class="svelte-1gyo6pc">И вот если у вас по ТЗ именно json-объект на входе, попробуйте его сломать, не передав ключ. Ещё можно не передать значение, но это не совсем негативный тест — система может воспринимать это нормально, как пустой ввод.</p> <h2 id="Separation" class="svelte-1gyo6pc">2. Данные разделены запятыми</h2> <p class="svelte-1gyo6pc">Пары «ключ:значение» в объекте разделяются запятыми. После последней пары запятая не нужна!</p> <p class="svelte-1gyo6pc"><b>Типичная ошибка:</b> поставили запятую в конце объекта:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-1gyo6pc">Это последствия копипасты. Взяли пример из документации, подставили в постман (ну или разработчик API подставил в код, который будет вызывать систему), а потом решили поменять поля местами.</p> <p class="svelte-1gyo6pc">В итоге было так:</p> <!> <p class="svelte-1gyo6pc">Смотрим на запрос — ну, query то важнее чем count, надо поменять их местами! Копипастим всю строку «"count": 7,», вставляем ниже. Перед ней запятую добавляем, а «лишнюю» убрать забываем. По крайней мере у меня это частая ошибка, когда я «кручу-верчу, местами поменять хочу».</p> <p class="svelte-1gyo6pc">Другой пример — когда мы добавляем в запрос новое поле. Примерный сценарий:</p> <!> <p class="svelte-1gyo6pc">Я на этот сценарий постоянно напарываюсь при тестировании перестановки полей. А ведь это нужно проверять! Хороший запрос должен быть как в математической присказке: «от перемены мест слагаемых сумма не меняется».</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-1gyo6pc">Не зря же определение json-объекта гласит, что «это <u>неупорядоченное</u> множество пар ключ:значение». Раз неупорядоченное — я могу передавать ключи в любом порядке. И сервер должен искать по запросу название ключа, а не обращаться к индексу элемента.</p> <p class="svelte-1gyo6pc">Разработчик, который будет взаимодействовать с API, тоже человек, который может ошибиться. И если система будет выдавать невразумительное сообщение об ошибке, можно долго думать, где конкретно ты налажал. Поэтому ошибки тоже тестируем.</p> <p class="svelte-1gyo6pc">Чтобы протестировать, как система обрабатывает «плохой json», замените запятую на точку с запятой:</p> <!> <p class="svelte-1gyo6pc">Или добавьте лишнюю запятую в конце запроса — эта ошибка будет встречаться чаще!</p> <!> <p class="svelte-1gyo6pc">Или пропустите запятую там, где она нужна:</p> <!> <p class="svelte-1gyo6pc">Аналогично с массивом. Данные внутри разделяются через запятую. Хотите попробовать сломать? Замените запятую на точку с запятой! Тогда система будет считать, что у вас не 5 значений, а 1 большое:</p> <!> <p class="svelte-1gyo6pc">*Я добавила комментарии внутри блока кода. Но учтите, что в JSON комментариев нет. Вообще. Так что если вы делаете запрос в Postman, не получится расставить комментарии у разных строчек в JSON-формате.</p> <h2 id="object" class="svelte-1gyo6pc">3. Объект находится внутри фигурных скобок &lbrace;&rbrace;</h2> <p class="svelte-1gyo6pc">Это объект:</p> <!> <p class="svelte-1gyo6pc">Чтобы сломать это условие, уберите одну фигурную скобку:</p> <!> <p class="svelte-1gyo6pc"></p> <!> <p class="svelte-1gyo6pc">Или попробуйте передать объект как массив:</p> <!> <p class="svelte-1gyo6pc">Ведь если система ждет от вас в запросе объект, то она будет искать фигурные скобки.</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <h2 id="array" class="svelte-1gyo6pc">4. Массив — внутри квадратных []</h2> <p class="svelte-1gyo6pc">Это массив:</p> <!> <p class="svelte-1gyo6pc">Чтобы сломать это условие, уберите одну квадратную скобку:</p> <!> <p class="svelte-1gyo6pc"></p> <!> <p class="svelte-1gyo6pc">Или попробуйте передать массив как объект, в фигурных скобках:</p> <!> <p class="svelte-1gyo6pc">Ведь если система ждет от вас в запросе массив, то она будет искать квадратные скобки.</p> <h2 id="output" class="svelte-1gyo6pc">Вывод</h2> <p class="svelte-1gyo6pc">JSON (JavaScript Object Notation) — текстовый формат обмена данными, основанный на JavaScript. Легко читается человеком и машиной. Часто используется в REST API (чаще, чем XML).</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-1gyo6pc">Корректные значения JSON:</p> <!> <p class="svelte-1gyo6pc">При тестировании REST API чаще всего мы будем работать именно с объектами, что в запросе, что в ответе. Массивы тоже будут, но обычно внутри объектов.</p> <p class="svelte-1gyo6pc">Комментариев в JSON, увы, нет.</p> <p class="svelte-1gyo6pc">Правила well formed JSON:</p> <!>',1);function Pe(oe){var N=ye(),w=e(f(N),4),re=e(i(w));se(re,{visited:!0,href:"https://www.w3schools.com/js/js_json_syntax.asp",children:(p,$)=>{o();var t=l("import");s(p,t)},$$slots:{default:!0}}),o(),u(w);var P=e(w,2),le=e(i(P));se(le,{visited:!0,href:"https://datatracker.ietf.org/doc/html/rfc7159#page-4",children:(p,$)=>{o();var t=l("JSON Grammar");s(p,t)},$$slots:{default:!0}}),o(),u(P);var M=e(P,4);x(M,{style:"margin-left: 3.5em;",children:(p,$)=>{var t=ie(),h=f(t);v(h,{children:(d,r)=>{o();var a=l("Данные написаны в виде пар «ключ:значение»");s(d,a)},$$slots:{default:!0}});var y=e(h,2);v(y,{children:(d,r)=>{o();var a=l("Данные разделены запятыми");s(d,a)},$$slots:{default:!0}});var _=e(y,2);v(_,{children:(d,r)=>{o();var a=l("Объект находится внутри фигурных скобок {}");s(d,a)},$$slots:{default:!0}});var g=e(_,2);v(g,{children:(d,r)=>{o();var a=l("Массив — внутри квадратных []");s(d,a)},$$slots:{default:!0}}),s(p,t)},$$slots:{default:!0}});var S=e(M,2),B=i(S),ae=i(B);m(ae,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/670/2bb/754/6702bb754535cfc309d67d148c12928c.png",style:"width: 100%;"}),u(B),u(S);var j=e(S,6);n(j,{code:'"name":"Ольга"',hideCopyButton:!0,showMoreLess:!1});var I=e(j,6);n(I,{code:"123",hideCopyButton:!0,showMoreLess:!1});var V=e(I,4);n(V,{code:'"Ольга"',hideCopyButton:!0,showMoreLess:!1});var k=e(V,12);n(k,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(p,$)=>{o();var t=l();t.nodeValue=`{
  "query": "Виктор Иван",
  "count": 7,
}`,s(p,t)},$$slots:{default:!0}});var L=e(k,2),q=i(L),pe=i(q);m(pe,{src:"https://habrastorage.org/getpro/habr/upload_files/79f/1e6/28e/79f1e628e9052de5ca240b6f23e8c1b1.png",style:"width: 100%;"}),u(q),u(L);var A=e(L,6);n(A,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(p,$)=>{o();var t=l();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван"
}`,s(p,t)},$$slots:{default:!0}});var R=e(A,6);x(R,{style:"margin-left: 3.5em;",children:(p,$)=>{var t=ue(),h=f(t);v(h,{children:(r,a)=>{o();var c=l("У меня уже есть работающий запрос в Postman-е. Но в нем минимум полей.");s(r,c)},$$slots:{default:!0}});var y=e(h,2);v(y,{children:(r,a)=>{o();var c=l("Я его клонирую");s(r,c)},$$slots:{default:!0}});var _=e(y,2);v(_,{children:(r,a)=>{o();var c=l("Копирую из документации нужное мне поле. Оно в примере не последнее, так что идёт с запятой на конце.");s(r,c)},$$slots:{default:!0}});var g=e(_,2);v(g,{children:(r,a)=>{o();var c=l("Вставляю себе в конце запроса — в текущий конец добавляю запятую, потом вставляю новую строку.");s(r,c)},$$slots:{default:!0}});var d=e(g,2);v(d,{children:(r,a)=>{o();var c=l("Отправляю запрос — ой, ошибка! Из копипасты то запятую не убрала!");s(r,c)},$$slots:{default:!0}}),s(p,t)},$$slots:{default:!0}});var O=e(R,4),F=i(O),de=i(F);m(de,{src:"https://habrastorage.org/getpro/habr/upload_files/5c8/324/d1d/5c8324d1d3a8e98eec2d14ea9b021acc.png",style:"width: 100%;"}),u(F),u(O);var T=e(O,8);n(T,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(p,$)=>{o();var t=l();t.nodeValue=`{
  "count": 7;
  "query": "Виктор Иван"
}`,s(p,t)},$$slots:{default:!0}});var E=e(T,4);n(E,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(p,$)=>{o();var t=l();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван",
}`,s(p,t)},$$slots:{default:!0}});var W=e(E,4);n(W,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(p,$)=>{o();var t=l();t.nodeValue=`{
  "count": 7
  "query": "Виктор Иван"
}`,s(p,t)},$$slots:{default:!0}});var G=e(W,4);n(G,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(p,$)=>{o();var t=l();t.nodeValue=`
[1, 2, 3, 4, 5] <!-- корректный массив на 5 элементов* -->
[1; 2; 3; 4; 5] <!-- некорректный массив, так как такого разделителя быть не должно. Это может быть простой строкой, но тогда нужны кавычки -->!
`,s(p,t)},$$slots:{default:!0}});var U=e(G,8);n(U,{code:"{a: 1, b: 2}",hideCopyButton:!0,showMoreLess:!1});var X=e(U,4);n(X,{code:"{a: 1, b: 2",hideCopyButton:!0,showMoreLess:!1});var z=e(X,4);n(z,{code:"a: 1, b: 2;}",hideCopyButton:!0,showMoreLess:!1});var D=e(z,4);n(D,{code:"[ a: 1, b: 2 ]",hideCopyButton:!0,showMoreLess:!1});var C=e(D,4),H=i(C),ce=i(H);m(ce,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/8d6/af6/6cc/8d6af66cc1822c72b050735bf0ab9c40.png",style:"width: 100%;"}),u(H),u(C);var K=e(C,6);n(K,{code:"[1, 2]",hideCopyButton:!0,showMoreLess:!1});var Q=e(K,4);n(Q,{code:"[1, 2",hideCopyButton:!0,showMoreLess:!1});var Y=e(Q,4);n(Y,{code:"1, 2]",hideCopyButton:!0,showMoreLess:!1});var Z=e(Y,4);n(Z,{code:"{ 1, 2 }",hideCopyButton:!0,showMoreLess:!1});var J=e(Z,8),ee=i(J),ve=i(ee);m(ve,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/c39/e9f/345/c39e9f3453f63e43c3f1b8d0a276f5b6.png",style:"width: 100%;"}),u(ee),u(J);var te=e(J,4);x(te,{style:"margin-left: 3.5em;",children:(p,$)=>{var t=$e(),h=f(t);v(h,{children:(r,a)=>{o();var c=l("JSON-объект — неупорядоченное множество пар «ключ:значение», заключённое в фигурные скобки «{ }».");s(r,c)},$$slots:{default:!0}});var y=e(h,2);v(y,{children:(r,a)=>{o();var c=l("Массив — упорядоченный набор значений, разделенных запятыми. Находится внутри квадратных скобок [].");s(r,c)},$$slots:{default:!0}});var _=e(y,2);v(_,{children:(r,a)=>{o();var c=l("Число (целое или вещественное).");s(r,c)},$$slots:{default:!0}});var g=e(_,2);v(g,{children:(r,a)=>{o();var c=l("Литералы true (логическое значение «истина»), false (логическое значение «ложь») и null.");s(r,c)},$$slots:{default:!0}});var d=e(g,2);v(d,{children:(r,a)=>{o();var c=l("Строка");s(r,c)},$$slots:{default:!0}}),s(p,t)},$$slots:{default:!0}});var ne=e(te,8);x(ne,{style:"margin-left: 3.5em;",children:(p,$)=>{var t=he(),h=f(t);v(h,{children:(d,r)=>{o();var a=l("Данные в объекте написаны в виде пар «ключ:значение»");s(d,a)},$$slots:{default:!0}});var y=e(h,2);v(y,{children:(d,r)=>{o();var a=l("Данные в объекте или массиве разделены запятыми");s(d,a)},$$slots:{default:!0}});var _=e(y,2);v(_,{children:(d,r)=>{o();var a=l("Объект находится внутри фигурных скобок {}");s(d,a)},$$slots:{default:!0}});var g=e(_,2);v(g,{children:(d,r)=>{o();var a=l("Массив — внутри квадратных []");s(d,a)},$$slots:{default:!0}}),s(p,t)},$$slots:{default:!0}}),s(oe,N)}export{Pe as component};
