import"../chunks/Bg9kRutz.js";import"../chunks/69_IOA4Y.js";import{Y as ye,a2 as ge,G as me,Z as Pe,J as u,K as $,T as e,U as x,V as r}from"../chunks/BHzwcRHV.js";import{t as y,a as s,b as a}from"../chunks/C3vxQsq0.js";import{s as be,d as we}from"../chunks/BzMNbgEA.js";import{i as xe}from"../chunks/DRB9nF1s.js";import{p as Se}from"../chunks/BnBzlWky.js";import{O as ve}from"../chunks/Do0dBBFC.js";import{O}from"../chunks/D2_OJww9.js";import{I as S}from"../chunks/DQUwKkOi.js";import{C as n}from"../chunks/DvCjHUHn.js";import{L as v}from"../chunks/Dy8ygWLA.js";var Le=y('<section class="anchor-section svelte-16wdcl3"><!></section>');function L(J,m){ye(m,!1);let b=Se(m,"id",8);ge(()=>{}),xe();var P=Le(),w=u(P);be(w,m,"default",{},null),$(P),me(()=>we(P,"id",b())),s(J,P),Pe()}var Oe=y("<!> <!> <!> <!>",1),Je=y('<h2 class="svelte-1gyo6pc">1. Данные написаны в виде пар «ключ:значение»</h2>'),Ce=y('<h2 class="svelte-1gyo6pc">2. Данные разделены запятыми</h2>'),Me=y("<!> <!> <!> <!> <!>",1),Ne=y('<h2 class="svelte-1gyo6pc">3. Объект находится внутри фигурных скобок &lbrace;&rbrace;</h2>'),Be=y('<h2 class="svelte-1gyo6pc">4. Массив — внутри квадратных []</h2>'),je=y('<h2 class="svelte-1gyo6pc">Вывод</h2>'),Ve=y("<!> <!> <!> <!> <!>",1),Ie=y("<!> <!> <!> <!>",1),ke=y('<h1 class="svelte-1gyo6pc">Well Formed JSON</h1> <p class="svelte-1gyo6pc">Разработчик сам решает, какой JSON будет считаться правильным, а какой нет. Но есть общие правила, которые нельзя нарушать. Наш JSON должен быть well formed, то есть синтаксически корректный.</p> <p class="svelte-1gyo6pc">Чтобы проверить JSON на синтаксис, можно использовать любой JSON Validator (так и гуглите). Я рекомендую сайт <!>. Там есть сам валидатор + описание типичных ошибок с примерами.</p> <p class="svelte-1gyo6pc">Но учтите, что парсеры внутри кода работают не по википедии или w3schools, а по RFC, стандарту. Так что если хотите изучить «каким должен быть JSON», то правильнее открывать RFC и искать там <!>. Однако простому тестировщику хватит набора типовых правил с w3schools, их и разберем.</p> <p class="svelte-1gyo6pc">Правила well formed JSON:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <!> <p class="svelte-1gyo6pc">Например, так:</p> <!> <p class="svelte-1gyo6pc">В JSON название ключа нужно брать в кавычки, в JavaScript не обязательно — он и так знает, что это строка. Если мы тестируем API, то там будет именно JSON, так что кавычки обычно нужны.</p> <p class="svelte-1gyo6pc">Но учтите, что это правило касается JSON-объекта. Потому что json может быть и числом, и строкой. То есть:</p> <!> <p class="svelte-1gyo6pc">Или</p> <!> <p class="svelte-1gyo6pc">Это тоже корректный json, хоть и не в виде пар «ключ:значение».</p> <p class="svelte-1gyo6pc">И вот если у вас по ТЗ именно json-объект на входе, попробуйте его сломать, не передав ключ. Ещё можно не передать значение, но это не совсем негативный тест — система может воспринимать это нормально, как пустой ввод.</p> <!> <p class="svelte-1gyo6pc">Пары «ключ:значение» в объекте разделяются запятыми. После последней пары запятая не нужна!</p> <p class="svelte-1gyo6pc"><b>Типичная ошибка:</b> поставили запятую в конце объекта:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-1gyo6pc">Это последствия копипасты. Взяли пример из документации, подставили в постман (ну или разработчик API подставил в код, который будет вызывать систему), а потом решили поменять поля местами.</p> <p class="svelte-1gyo6pc">В итоге было так:</p> <!> <p class="svelte-1gyo6pc">Смотрим на запрос — ну, query то важнее чем count, надо поменять их местами! Копипастим всю строку «"count": 7,», вставляем ниже. Перед ней запятую добавляем, а «лишнюю» убрать забываем. По крайней мере у меня это частая ошибка, когда я «кручу-верчу, местами поменять хочу».</p> <p class="svelte-1gyo6pc">Другой пример — когда мы добавляем в запрос новое поле. Примерный сценарий:</p> <!> <p class="svelte-1gyo6pc">Я на этот сценарий постоянно напарываюсь при тестировании перестановки полей. А ведь это нужно проверять! Хороший запрос должен быть как в математической присказке: «от перемены мест слагаемых сумма не меняется».</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-1gyo6pc">Не зря же определение json-объекта гласит, что «это <u>неупорядоченное</u> множество пар ключ:значение». Раз неупорядоченное — я могу передавать ключи в любом порядке. И сервер должен искать по запросу название ключа, а не обращаться к индексу элемента.</p> <p class="svelte-1gyo6pc">Разработчик, который будет взаимодействовать с API, тоже человек, который может ошибиться. И если система будет выдавать невразумительное сообщение об ошибке, можно долго думать, где конкретно ты налажал. Поэтому ошибки тоже тестируем.</p> <p class="svelte-1gyo6pc">Чтобы протестировать, как система обрабатывает «плохой json», замените запятую на точку с запятой:</p> <!> <p class="svelte-1gyo6pc">Или добавьте лишнюю запятую в конце запроса — эта ошибка будет встречаться чаще!</p> <!> <p class="svelte-1gyo6pc">Или пропустите запятую там, где она нужна:</p> <!> <p class="svelte-1gyo6pc">Аналогично с массивом. Данные внутри разделяются через запятую. Хотите попробовать сломать? Замените запятую на точку с запятой! Тогда система будет считать, что у вас не 5 значений, а 1 большое:</p> <!> <p class="svelte-1gyo6pc">*Я добавила комментарии внутри блока кода. Но учтите, что в JSON комментариев нет. Вообще. Так что если вы делаете запрос в Postman, не получится расставить комментарии у разных строчек в JSON-формате.</p> <!> <p class="svelte-1gyo6pc">Это объект:</p> <!> <p class="svelte-1gyo6pc">Чтобы сломать это условие, уберите одну фигурную скобку:</p> <!> <p class="svelte-1gyo6pc"></p> <!> <p class="svelte-1gyo6pc">Или попробуйте передать объект как массив:</p> <!> <p class="svelte-1gyo6pc">Ведь если система ждет от вас в запросе объект, то она будет искать фигурные скобки.</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <!> <p class="svelte-1gyo6pc">Это массив:</p> <!> <p class="svelte-1gyo6pc">Чтобы сломать это условие, уберите одну квадратную скобку:</p> <!> <p class="svelte-1gyo6pc"></p> <!> <p class="svelte-1gyo6pc">Или попробуйте передать массив как объект, в фигурных скобках:</p> <!> <p class="svelte-1gyo6pc">Ведь если система ждет от вас в запросе массив, то она будет искать квадратные скобки.</p> <!> <p class="svelte-1gyo6pc">JSON (JavaScript Object Notation) — текстовый формат обмена данными, основанный на JavaScript. Легко читается человеком и машиной. Часто используется в REST API (чаще, чем XML).</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-1gyo6pc">Корректные значения JSON:</p> <!> <p class="svelte-1gyo6pc">При тестировании REST API чаще всего мы будем работать именно с объектами, что в запросе, что в ответе. Массивы тоже будут, но обычно внутри объектов.</p> <p class="svelte-1gyo6pc">Комментариев в JSON, увы, нет.</p> <p class="svelte-1gyo6pc">Правила well formed JSON:</p> <!>',1);function Ze(J){var m=ke(),b=e(x(m),4),P=e(u(b));ve(P,{visited:!0,href:"https://www.w3schools.com/js/js_json_syntax.asp",children:(o,i)=>{r();var t=a("import");s(o,t)},$$slots:{default:!0}}),r(),$(b);var w=e(b,2),ne=e(u(w));ve(ne,{visited:!0,href:"https://datatracker.ietf.org/doc/html/rfc7159#page-4",children:(o,i)=>{r();var t=a("JSON Grammar");s(o,t)},$$slots:{default:!0}}),r(),$(w);var V=e(w,4);O(V,{style:"margin-left: 3.5em;",children:(o,i)=>{var t=Oe(),h=x(t);v(h,{children:(d,l)=>{r();var p=a("Данные написаны в виде пар «ключ:значение»");s(d,p)},$$slots:{default:!0}});var _=e(h,2);v(_,{children:(d,l)=>{r();var p=a("Данные разделены запятыми");s(d,p)},$$slots:{default:!0}});var f=e(_,2);v(f,{children:(d,l)=>{r();var p=a("Объект находится внутри фигурных скобок {}");s(d,p)},$$slots:{default:!0}});var g=e(f,2);v(g,{children:(d,l)=>{r();var p=a("Массив — внутри квадратных []");s(d,p)},$$slots:{default:!0}}),s(o,t)},$$slots:{default:!0}});var C=e(V,2),I=u(C),ie=u(I);S(ie,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/670/2bb/754/6702bb754535cfc309d67d148c12928c.png",style:"width: 100%;"}),$(I),$(C);var k=e(C,2);L(k,{id:"dataKeyValue",children:(o,i)=>{var t=Je();s(o,t)},$$slots:{default:!0}});var q=e(k,4);n(q,{code:'"name":"Ольга"',hideCopyButton:!0,showMoreLess:!1});var A=e(q,6);n(A,{code:"123",hideCopyButton:!0,showMoreLess:!1});var R=e(A,4);n(R,{code:'"Ольга"',hideCopyButton:!0,showMoreLess:!1});var F=e(R,6);L(F,{id:"Separation",children:(o,i)=>{var t=Ce();s(o,t)},$$slots:{default:!0}});var T=e(F,6);n(T,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,i)=>{r();var t=a();t.nodeValue=`{
  "query": "Виктор Иван",
  "count": 7,
}`,s(o,t)},$$slots:{default:!0}});var M=e(T,2),E=u(M),ue=u(E);S(ue,{src:"https://habrastorage.org/getpro/habr/upload_files/79f/1e6/28e/79f1e628e9052de5ca240b6f23e8c1b1.png",style:"width: 100%;"}),$(E),$(M);var G=e(M,6);n(G,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,i)=>{r();var t=a();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван"
}`,s(o,t)},$$slots:{default:!0}});var K=e(G,6);O(K,{style:"margin-left: 3.5em;",children:(o,i)=>{var t=Me(),h=x(t);v(h,{children:(l,p)=>{r();var c=a("У меня уже есть работающий запрос в Postman-е. Но в нем минимум полей.");s(l,c)},$$slots:{default:!0}});var _=e(h,2);v(_,{children:(l,p)=>{r();var c=a("Я его клонирую");s(l,c)},$$slots:{default:!0}});var f=e(_,2);v(f,{children:(l,p)=>{r();var c=a("Копирую из документации нужное мне поле. Оно в примере не последнее, так что идёт с запятой на конце.");s(l,c)},$$slots:{default:!0}});var g=e(f,2);v(g,{children:(l,p)=>{r();var c=a("Вставляю себе в конце запроса — в текущий конец добавляю запятую, потом вставляю новую строку.");s(l,c)},$$slots:{default:!0}});var d=e(g,2);v(d,{children:(l,p)=>{r();var c=a("Отправляю запрос — ой, ошибка! Из копипасты то запятую не убрала!");s(l,c)},$$slots:{default:!0}}),s(o,t)},$$slots:{default:!0}});var N=e(K,4),U=u(N),$e=u(U);S($e,{src:"https://habrastorage.org/getpro/habr/upload_files/5c8/324/d1d/5c8324d1d3a8e98eec2d14ea9b021acc.png",style:"width: 100%;"}),$(U),$(N);var W=e(N,8);n(W,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,i)=>{r();var t=a();t.nodeValue=`{
  "count": 7;
  "query": "Виктор Иван"
}`,s(o,t)},$$slots:{default:!0}});var X=e(W,4);n(X,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,i)=>{r();var t=a();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван",
}`,s(o,t)},$$slots:{default:!0}});var Y=e(X,4);n(Y,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,i)=>{r();var t=a();t.nodeValue=`{
  "count": 7
  "query": "Виктор Иван"
}`,s(o,t)},$$slots:{default:!0}});var Z=e(Y,4);n(Z,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,i)=>{r();var t=a();t.nodeValue=`
[1, 2, 3, 4, 5] <!-- корректный массив на 5 элементов* -->
[1; 2; 3; 4; 5] <!-- некорректный массив, так как такого разделителя быть не должно. Это может быть простой строкой, но тогда нужны кавычки -->!
`,s(o,t)},$$slots:{default:!0}});var z=e(Z,4);L(z,{id:"object",children:(o,i)=>{var t=Ne();s(o,t)},$$slots:{default:!0}});var D=e(z,4);n(D,{code:"{a: 1, b: 2}",hideCopyButton:!0,showMoreLess:!1});var H=e(D,4);n(H,{code:"{a: 1, b: 2",hideCopyButton:!0,showMoreLess:!1});var Q=e(H,4);n(Q,{code:"a: 1, b: 2;}",hideCopyButton:!0,showMoreLess:!1});var ee=e(Q,4);n(ee,{code:"[ a: 1, b: 2 ]",hideCopyButton:!0,showMoreLess:!1});var B=e(ee,4),te=u(B),he=u(te);S(he,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/8d6/af6/6cc/8d6af66cc1822c72b050735bf0ab9c40.png",style:"width: 100%;"}),$(te),$(B);var se=e(B,2);L(se,{id:"array",children:(o,i)=>{var t=Be();s(o,t)},$$slots:{default:!0}});var oe=e(se,4);n(oe,{code:"[1, 2]",hideCopyButton:!0,showMoreLess:!1});var re=e(oe,4);n(re,{code:"[1, 2",hideCopyButton:!0,showMoreLess:!1});var le=e(re,4);n(le,{code:"1, 2]",hideCopyButton:!0,showMoreLess:!1});var ae=e(le,4);n(ae,{code:"{ 1, 2 }",hideCopyButton:!0,showMoreLess:!1});var pe=e(ae,4);L(pe,{id:"output",children:(o,i)=>{var t=je();s(o,t)},$$slots:{default:!0}});var j=e(pe,4),de=u(j),_e=u(de);S(_e,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/c39/e9f/345/c39e9f3453f63e43c3f1b8d0a276f5b6.png",style:"width: 100%;"}),$(de),$(j);var ce=e(j,4);O(ce,{style:"margin-left: 3.5em;",children:(o,i)=>{var t=Ve(),h=x(t);v(h,{children:(l,p)=>{r();var c=a("JSON-объект — неупорядоченное множество пар «ключ:значение», заключённое в фигурные скобки «{ }».");s(l,c)},$$slots:{default:!0}});var _=e(h,2);v(_,{children:(l,p)=>{r();var c=a("Массив — упорядоченный набор значений, разделенных запятыми. Находится внутри квадратных скобок [].");s(l,c)},$$slots:{default:!0}});var f=e(_,2);v(f,{children:(l,p)=>{r();var c=a("Число (целое или вещественное).");s(l,c)},$$slots:{default:!0}});var g=e(f,2);v(g,{children:(l,p)=>{r();var c=a("Литералы true (логическое значение «истина»), false (логическое значение «ложь») и null.");s(l,c)},$$slots:{default:!0}});var d=e(g,2);v(d,{children:(l,p)=>{r();var c=a("Строка");s(l,c)},$$slots:{default:!0}}),s(o,t)},$$slots:{default:!0}});var fe=e(ce,8);O(fe,{style:"margin-left: 3.5em;",children:(o,i)=>{var t=Ie(),h=x(t);v(h,{children:(d,l)=>{r();var p=a("Данные в объекте написаны в виде пар «ключ:значение»");s(d,p)},$$slots:{default:!0}});var _=e(h,2);v(_,{children:(d,l)=>{r();var p=a("Данные в объекте или массиве разделены запятыми");s(d,p)},$$slots:{default:!0}});var f=e(_,2);v(f,{children:(d,l)=>{r();var p=a("Объект находится внутри фигурных скобок {}");s(d,p)},$$slots:{default:!0}});var g=e(f,2);v(g,{children:(d,l)=>{r();var p=a("Массив — внутри квадратных []");s(d,p)},$$slots:{default:!0}}),s(o,t)},$$slots:{default:!0}}),s(J,m)}export{Ze as component};
