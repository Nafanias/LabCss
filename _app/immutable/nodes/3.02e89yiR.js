import{t as m,a as r,b as l}from"../chunks/22ccgk4N.js";import"../chunks/B1_hZmLh.js";import{s as e,f as g,c as $,n as s,r as h}from"../chunks/DwcvzRHm.js";import{A as P}from"../chunks/DMQh0Ac0.js";/* empty css                */import{O as pe}from"../chunks/Du8Kq-ZH.js";import{O as x}from"../chunks/DreLKi_o.js";import{I as b}from"../chunks/CMj58Ndf.js";import{C as u}from"../chunks/B1fFkSG_.js";import{L as i}from"../chunks/Cm31QIBO.js";var me=m("<!> <!> <!> <!>",1),ye=m("<h2>1. Данные написаны в виде пар «ключ:значение»</h2>"),ge=m("<h2>2. Данные разделены запятыми</h2>"),Pe=m("<!> <!> <!> <!> <!>",1),be=m("<h2>3. Объект находится внутри фигурных скобок &lbrace;&rbrace;</h2>"),xe=m("<h2>4. Массив — внутри квадратных []</h2>"),we=m("<h2>Вывод</h2>"),Se=m("<!> <!> <!> <!> <!>",1),Le=m("<!> <!> <!> <!>",1),Oe=m('<h1>Well Formed JSON</h1> <p>Разработчик сам решает, какой JSON будет считаться правильным, а какой нет. Но есть общие правила, которые нельзя нарушать. Наш JSON должен быть well formed, то есть синтаксически корректный.</p> <p>Чтобы проверить JSON на синтаксис, можно использовать любой JSON Validator (так и гуглите). Я рекомендую сайт <!>. Там есть сам валидатор + описание типичных ошибок с примерами.</p> <p>Но учтите, что парсеры внутри кода работают не по википедии или w3schools, а по RFC, стандарту. Так что если хотите изучить «каким должен быть JSON», то правильнее открывать RFC и искать там <!>. Однако простому тестировщику хватит набора типовых правил с w3schools, их и разберем.</p> <p>Правила well formed JSON:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <!> <p>Например, так:</p> <!> <p>В JSON название ключа нужно брать в кавычки, в JavaScript не обязательно — он и так знает, что это строка. Если мы тестируем API, то там будет именно JSON, так что кавычки обычно нужны.</p> <p>Но учтите, что это правило касается JSON-объекта. Потому что json может быть и числом, и строкой. То есть:</p> <!> <p>Или</p> <!> <p>Это тоже корректный json, хоть и не в виде пар «ключ:значение».</p> <p>И вот если у вас по ТЗ именно json-объект на входе, попробуйте его сломать, не передав ключ. Ещё можно не передать значение, но это не совсем негативный тест — система может воспринимать это нормально, как пустой ввод.</p> <!> <p>Пары «ключ:значение» в объекте разделяются запятыми. После последней пары запятая не нужна!</p> <p><b>Типичная ошибка:</b> поставили запятую в конце объекта:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p>Это последствия копипасты. Взяли пример из документации, подставили в постман (ну или разработчик API подставил в код, который будет вызывать систему), а потом решили поменять поля местами.</p> <p>В итоге было так:</p> <!> <p>Смотрим на запрос — ну, query то важнее чем count, надо поменять их местами! Копипастим всю строку «"count": 7,», вставляем ниже. Перед ней запятую добавляем, а «лишнюю» убрать забываем. По крайней мере у меня это частая ошибка, когда я «кручу-верчу, местами поменять хочу».</p> <p>Другой пример — когда мы добавляем в запрос новое поле. Примерный сценарий:</p> <!> <p>Я на этот сценарий постоянно напарываюсь при тестировании перестановки полей. А ведь это нужно проверять! Хороший запрос должен быть как в математической присказке: «от перемены мест слагаемых сумма не меняется».</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p>Не зря же определение json-объекта гласит, что «это <u>неупорядоченное</u> множество пар ключ:значение». Раз неупорядоченное — я могу передавать ключи в любом порядке. И сервер должен искать по запросу название ключа, а не обращаться к индексу элемента.</p> <p>Разработчик, который будет взаимодействовать с API, тоже человек, который может ошибиться. И если система будет выдавать невразумительное сообщение об ошибке, можно долго думать, где конкретно ты налажал. Поэтому ошибки тоже тестируем.</p> <p>Чтобы протестировать, как система обрабатывает «плохой json», замените запятую на точку с запятой:</p> <!> <p>Или добавьте лишнюю запятую в конце запроса — эта ошибка будет встречаться чаще!</p> <!> <p>Или пропустите запятую там, где она нужна:</p> <!> <p>Аналогично с массивом. Данные внутри разделяются через запятую. Хотите попробовать сломать? Замените запятую на точку с запятой! Тогда система будет считать, что у вас не 5 значений, а 1 большое:</p> <!> <p>*Я добавила комментарии внутри блока кода. Но учтите, что в JSON комментариев нет. Вообще. Так что если вы делаете запрос в Postman, не получится расставить комментарии у разных строчек в JSON-формате.</p> <!> <p>Это объект:</p> <!> <p>Чтобы сломать это условие, уберите одну фигурную скобку:</p> <!> <p></p> <!> <p>Или попробуйте передать объект как массив:</p> <!> <p>Ведь если система ждет от вас в запросе объект, то она будет искать фигурные скобки.</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <!> <p>Это массив:</p> <!> <p>Чтобы сломать это условие, уберите одну квадратную скобку:</p> <!> <p></p> <!> <p>Или попробуйте передать массив как объект, в фигурных скобках:</p> <!> <p>Ведь если система ждет от вас в запросе массив, то она будет искать квадратные скобки.</p> <!> <p>JSON (JavaScript Object Notation) — текстовый формат обмена данными, основанный на JavaScript. Легко читается человеком и машиной. Часто используется в REST API (чаще, чем XML).</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p>Корректные значения JSON:</p> <!> <p>При тестировании REST API чаще всего мы будем работать именно с объектами, что в запросе, что в ответе. Массивы тоже будут, но обычно внутри объектов.</p> <p>Комментариев в JSON, увы, нет.</p> <p>Правила well formed JSON:</p> <!>',1);function qe(ne){var M=Oe(),w=e(g(M),4),ie=e($(w));pe(ie,{visited:!0,href:"https://www.w3schools.com/js/js_json_syntax.asp",children:(o,v)=>{s();var t=l("import");r(o,t)},$$slots:{default:!0}}),s(),h(w);var S=e(w,2),ue=e($(S));pe(ue,{visited:!0,href:"https://datatracker.ietf.org/doc/html/rfc7159#page-4",children:(o,v)=>{s();var t=l("JSON Grammar");r(o,t)},$$slots:{default:!0}}),s(),h(S);var B=e(S,4);x(B,{style:"margin-left: 3.5em;",children:(o,v)=>{var t=me(),_=g(t);i(_,{children:(p,a)=>{s();var d=l("Данные написаны в виде пар «ключ:значение»");r(p,d)},$$slots:{default:!0}});var c=e(_,2);i(c,{children:(p,a)=>{s();var d=l("Данные разделены запятыми");r(p,d)},$$slots:{default:!0}});var f=e(c,2);i(f,{children:(p,a)=>{s();var d=l("Объект находится внутри фигурных скобок {}");r(p,d)},$$slots:{default:!0}});var y=e(f,2);i(y,{children:(p,a)=>{s();var d=l("Массив — внутри квадратных []");r(p,d)},$$slots:{default:!0}}),r(o,t)},$$slots:{default:!0}});var L=e(B,2),j=$(L),ve=$(j);b(ve,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/670/2bb/754/6702bb754535cfc309d67d148c12928c.png",style:"width: 100%;"}),h(j),h(L);var I=e(L,2);P(I,{id:"dataKeyValue",children:(o,v)=>{var t=ye();r(o,t)},$$slots:{default:!0}});var V=e(I,4);u(V,{code:'"name":"Ольга"',hideCopyButton:!0,showMoreLess:!1});var k=e(V,6);u(k,{code:"123",hideCopyButton:!0,showMoreLess:!1});var A=e(k,4);u(A,{code:'"Ольга"',hideCopyButton:!0,showMoreLess:!1});var q=e(A,6);P(q,{id:"Separation",children:(o,v)=>{var t=ge();r(o,t)},$$slots:{default:!0}});var R=e(q,6);u(R,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,v)=>{s();var t=l();t.nodeValue=`{
  "query": "Виктор Иван",
  "count": 7,
}`,r(o,t)},$$slots:{default:!0}});var O=e(R,2),F=$(O),$e=$(F);b($e,{src:"https://habrastorage.org/getpro/habr/upload_files/79f/1e6/28e/79f1e628e9052de5ca240b6f23e8c1b1.png",style:"width: 100%;"}),h(F),h(O);var E=e(O,6);u(E,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,v)=>{s();var t=l();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван"
}`,r(o,t)},$$slots:{default:!0}});var T=e(E,6);x(T,{style:"margin-left: 3.5em;",children:(o,v)=>{var t=Pe(),_=g(t);i(_,{children:(a,d)=>{s();var n=l("У меня уже есть работающий запрос в Postman-е. Но в нем минимум полей.");r(a,n)},$$slots:{default:!0}});var c=e(_,2);i(c,{children:(a,d)=>{s();var n=l("Я его клонирую");r(a,n)},$$slots:{default:!0}});var f=e(c,2);i(f,{children:(a,d)=>{s();var n=l("Копирую из документации нужное мне поле. Оно в примере не последнее, так что идёт с запятой на конце.");r(a,n)},$$slots:{default:!0}});var y=e(f,2);i(y,{children:(a,d)=>{s();var n=l("Вставляю себе в конце запроса — в текущий конец добавляю запятую, потом вставляю новую строку.");r(a,n)},$$slots:{default:!0}});var p=e(y,2);i(p,{children:(a,d)=>{s();var n=l("Отправляю запрос — ой, ошибка! Из копипасты то запятую не убрала!");r(a,n)},$$slots:{default:!0}}),r(o,t)},$$slots:{default:!0}});var C=e(T,4),G=$(C),he=$(G);b(he,{src:"https://habrastorage.org/getpro/habr/upload_files/5c8/324/d1d/5c8324d1d3a8e98eec2d14ea9b021acc.png",style:"width: 100%;"}),h(G),h(C);var K=e(C,8);u(K,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,v)=>{s();var t=l();t.nodeValue=`{
  "count": 7;
  "query": "Виктор Иван"
}`,r(o,t)},$$slots:{default:!0}});var W=e(K,4);u(W,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,v)=>{s();var t=l();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван",
}`,r(o,t)},$$slots:{default:!0}});var X=e(W,4);u(X,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,v)=>{s();var t=l();t.nodeValue=`{
  "count": 7
  "query": "Виктор Иван"
}`,r(o,t)},$$slots:{default:!0}});var z=e(X,4);u(z,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(o,v)=>{s();var t=l();t.nodeValue=`
[1, 2, 3, 4, 5] <!-- корректный массив на 5 элементов* -->
[1; 2; 3; 4; 5] <!-- некорректный массив, так как такого разделителя быть не должно. Это может быть простой строкой, но тогда нужны кавычки -->!
`,r(o,t)},$$slots:{default:!0}});var D=e(z,4);P(D,{id:"object",children:(o,v)=>{var t=be();r(o,t)},$$slots:{default:!0}});var H=e(D,4);u(H,{code:"{a: 1, b: 2}",hideCopyButton:!0,showMoreLess:!1});var Q=e(H,4);u(Q,{code:"{a: 1, b: 2",hideCopyButton:!0,showMoreLess:!1});var U=e(Q,4);u(U,{code:"a: 1, b: 2;}",hideCopyButton:!0,showMoreLess:!1});var Y=e(U,4);u(Y,{code:"[ a: 1, b: 2 ]",hideCopyButton:!0,showMoreLess:!1});var J=e(Y,4),Z=$(J),_e=$(Z);b(_e,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/8d6/af6/6cc/8d6af66cc1822c72b050735bf0ab9c40.png",style:"width: 100%;"}),h(Z),h(J);var ee=e(J,2);P(ee,{id:"array",children:(o,v)=>{var t=xe();r(o,t)},$$slots:{default:!0}});var te=e(ee,4);u(te,{code:"[1, 2]",hideCopyButton:!0,showMoreLess:!1});var re=e(te,4);u(re,{code:"[1, 2",hideCopyButton:!0,showMoreLess:!1});var oe=e(re,4);u(oe,{code:"1, 2]",hideCopyButton:!0,showMoreLess:!1});var se=e(oe,4);u(se,{code:"{ 1, 2 }",hideCopyButton:!0,showMoreLess:!1});var ae=e(se,4);P(ae,{id:"output",children:(o,v)=>{var t=we();r(o,t)},$$slots:{default:!0}});var N=e(ae,4),le=$(N),ce=$(le);b(ce,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/c39/e9f/345/c39e9f3453f63e43c3f1b8d0a276f5b6.png",style:"width: 100%;"}),h(le),h(N);var de=e(N,4);x(de,{style:"margin-left: 3.5em;",children:(o,v)=>{var t=Se(),_=g(t);i(_,{children:(a,d)=>{s();var n=l("JSON-объект — неупорядоченное множество пар «ключ:значение», заключённое в фигурные скобки «{ }».");r(a,n)},$$slots:{default:!0}});var c=e(_,2);i(c,{children:(a,d)=>{s();var n=l("Массив — упорядоченный набор значений, разделенных запятыми. Находится внутри квадратных скобок [].");r(a,n)},$$slots:{default:!0}});var f=e(c,2);i(f,{children:(a,d)=>{s();var n=l("Число (целое или вещественное).");r(a,n)},$$slots:{default:!0}});var y=e(f,2);i(y,{children:(a,d)=>{s();var n=l("Литералы true (логическое значение «истина»), false (логическое значение «ложь») и null.");r(a,n)},$$slots:{default:!0}});var p=e(y,2);i(p,{children:(a,d)=>{s();var n=l("Строка");r(a,n)},$$slots:{default:!0}}),r(o,t)},$$slots:{default:!0}});var fe=e(de,8);x(fe,{style:"margin-left: 3.5em;",children:(o,v)=>{var t=Le(),_=g(t);i(_,{children:(p,a)=>{s();var d=l("Данные в объекте написаны в виде пар «ключ:значение»");r(p,d)},$$slots:{default:!0}});var c=e(_,2);i(c,{children:(p,a)=>{s();var d=l("Данные в объекте или массиве разделены запятыми");r(p,d)},$$slots:{default:!0}});var f=e(c,2);i(f,{children:(p,a)=>{s();var d=l("Объект находится внутри фигурных скобок {}");r(p,d)},$$slots:{default:!0}});var y=e(f,2);i(y,{children:(p,a)=>{s();var d=l("Массив — внутри квадратных []");r(p,d)},$$slots:{default:!0}}),r(o,t)},$$slots:{default:!0}}),r(ne,M)}export{qe as component};
