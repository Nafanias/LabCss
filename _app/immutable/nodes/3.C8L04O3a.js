import{t as w,a as s,b as a}from"../chunks/qGGmyE-U.js";import"../chunks/9Ud8F66T.js";import{L as e,M as y,J as u,N as o,K as $}from"../chunks/TTrIPi8I.js";import{A as g}from"../chunks/5ZNi9sMP.js";import{O as de}from"../chunks/-XsP_0nH.js";import{O as b}from"../chunks/Btiysd1D.js";import{I as P}from"../chunks/bTJzNCin.js";import{C as i}from"../chunks/DTaq0LnW.js";import{L as n}from"../chunks/DF7_RIey.js";var we=w("<!> <!> <!> <!>",1),me=w('<h2 class="svelte-p9w0e">1. Данные написаны в виде пар «ключ:значение»</h2>'),ye=w('<h2 class="svelte-p9w0e">2. Данные разделены запятыми</h2>'),ge=w("<!> <!> <!> <!> <!>",1),Pe=w('<h2 class="svelte-p9w0e">3. Объект находится внутри фигурных скобок &lbrace;&rbrace;</h2>'),be=w('<h2 class="svelte-p9w0e">4. Массив — внутри квадратных []</h2>'),xe=w('<h2 class="svelte-p9w0e">Вывод</h2>'),Se=w("<!> <!> <!> <!> <!>",1),Le=w("<!> <!> <!> <!>",1),Oe=w('<h1 class="svelte-p9w0e">Well Formed JSON</h1> <p class="svelte-p9w0e">Разработчик сам решает, какой JSON будет считаться правильным, а какой нет. Но есть общие правила, которые нельзя нарушать. Наш JSON должен быть well formed, то есть синтаксически корректный.</p> <p class="svelte-p9w0e">Чтобы проверить JSON на синтаксис, можно использовать любой JSON Validator (так и гуглите). Я рекомендую сайт <!>. Там есть сам валидатор + описание типичных ошибок с примерами.</p> <p class="svelte-p9w0e">Но учтите, что парсеры внутри кода работают не по википедии или w3schools, а по RFC, стандарту. Так что если хотите изучить «каким должен быть JSON», то правильнее открывать RFC и искать там <!>. Однако простому тестировщику хватит набора типовых правил с w3schools, их и разберем.</p> <p class="svelte-p9w0e">Правила well formed JSON:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <!> <p class="svelte-p9w0e">Например, так:</p> <!> <p class="svelte-p9w0e">В JSON название ключа нужно брать в кавычки, в JavaScript не обязательно — он и так знает, что это строка. Если мы тестируем API, то там будет именно JSON, так что кавычки обычно нужны.</p> <p class="svelte-p9w0e">Но учтите, что это правило касается JSON-объекта. Потому что json может быть и числом, и строкой. То есть:</p> <!> <p class="svelte-p9w0e">Или</p> <!> <p class="svelte-p9w0e">Это тоже корректный json, хоть и не в виде пар «ключ:значение».</p> <p class="svelte-p9w0e">И вот если у вас по ТЗ именно json-объект на входе, попробуйте его сломать, не передав ключ. Ещё можно не передать значение, но это не совсем негативный тест — система может воспринимать это нормально, как пустой ввод.</p> <!> <p class="svelte-p9w0e">Пары «ключ:значение» в объекте разделяются запятыми. После последней пары запятая не нужна!</p> <p class="svelte-p9w0e"><b>Типичная ошибка:</b> поставили запятую в конце объекта:</p> <!> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-p9w0e">Это последствия копипасты. Взяли пример из документации, подставили в постман (ну или разработчик API подставил в код, который будет вызывать систему), а потом решили поменять поля местами.</p> <p class="svelte-p9w0e">В итоге было так:</p> <!> <p class="svelte-p9w0e">Смотрим на запрос — ну, query то важнее чем count, надо поменять их местами! Копипастим всю строку «"count": 7,», вставляем ниже. Перед ней запятую добавляем, а «лишнюю» убрать забываем. По крайней мере у меня это частая ошибка, когда я «кручу-верчу, местами поменять хочу».</p> <p class="svelte-p9w0e">Другой пример — когда мы добавляем в запрос новое поле. Примерный сценарий:</p> <!> <p class="svelte-p9w0e">Я на этот сценарий постоянно напарываюсь при тестировании перестановки полей. А ведь это нужно проверять! Хороший запрос должен быть как в математической присказке: «от перемены мест слагаемых сумма не меняется».</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-p9w0e">Не зря же определение json-объекта гласит, что «это <u>неупорядоченное</u> множество пар ключ:значение». Раз неупорядоченное — я могу передавать ключи в любом порядке. И сервер должен искать по запросу название ключа, а не обращаться к индексу элемента.</p> <p class="svelte-p9w0e">Разработчик, который будет взаимодействовать с API, тоже человек, который может ошибиться. И если система будет выдавать невразумительное сообщение об ошибке, можно долго думать, где конкретно ты налажал. Поэтому ошибки тоже тестируем.</p> <p class="svelte-p9w0e">Чтобы протестировать, как система обрабатывает «плохой json», замените запятую на точку с запятой:</p> <!> <p class="svelte-p9w0e">Или добавьте лишнюю запятую в конце запроса — эта ошибка будет встречаться чаще!</p> <!> <p class="svelte-p9w0e">Или пропустите запятую там, где она нужна:</p> <!> <p class="svelte-p9w0e">Аналогично с массивом. Данные внутри разделяются через запятую. Хотите попробовать сломать? Замените запятую на точку с запятой! Тогда система будет считать, что у вас не 5 значений, а 1 большое:</p> <!> <p class="svelte-p9w0e">*Я добавила комментарии внутри блока кода. Но учтите, что в JSON комментариев нет. Вообще. Так что если вы делаете запрос в Postman, не получится расставить комментарии у разных строчек в JSON-формате.</p> <!> <p class="svelte-p9w0e">Это объект:</p> <!> <p class="svelte-p9w0e">Чтобы сломать это условие, уберите одну фигурную скобку:</p> <!> <p class="svelte-p9w0e"></p> <!> <p class="svelte-p9w0e">Или попробуйте передать объект как массив:</p> <!> <p class="svelte-p9w0e">Ведь если система ждет от вас в запросе объект, то она будет искать фигурные скобки.</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <!> <p class="svelte-p9w0e">Это массив:</p> <!> <p class="svelte-p9w0e">Чтобы сломать это условие, уберите одну квадратную скобку:</p> <!> <p class="svelte-p9w0e"></p> <!> <p class="svelte-p9w0e">Или попробуйте передать массив как объект, в фигурных скобках:</p> <!> <p class="svelte-p9w0e">Ведь если система ждет от вас в запросе массив, то она будет искать квадратные скобки.</p> <!> <p class="svelte-p9w0e">JSON (JavaScript Object Notation) — текстовый формат обмена данными, основанный на JavaScript. Легко читается человеком и машиной. Часто используется в REST API (чаще, чем XML).</p> <div style="text-align: center; margin-top: 20px;"><div style="width: 60%; display: inline-block;"><!></div></div> <p class="svelte-p9w0e">Корректные значения JSON:</p> <!> <p class="svelte-p9w0e">При тестировании REST API чаще всего мы будем работать именно с объектами, что в запросе, что в ответе. Массивы тоже будут, но обычно внутри объектов.</p> <p class="svelte-p9w0e">Комментариев в JSON, увы, нет.</p> <p class="svelte-p9w0e">Правила well formed JSON:</p> <!>',1);function Ae(ve){var M=Oe(),x=e(y(M),4),ne=e(u(x));de(ne,{visited:!0,href:"https://www.w3schools.com/js/js_json_syntax.asp",children:(r,c)=>{o();var t=a("import");s(r,t)},$$slots:{default:!0}}),o(),$(x);var S=e(x,2),ie=e(u(S));de(ie,{visited:!0,href:"https://datatracker.ietf.org/doc/html/rfc7159#page-4",children:(r,c)=>{o();var t=a("JSON Grammar");s(r,t)},$$slots:{default:!0}}),o(),$(S);var B=e(S,4);b(B,{style:"margin-left: 3.5em;",children:(r,c)=>{var t=we(),h=y(t);n(h,{children:(d,l)=>{o();var p=a("Данные написаны в виде пар «ключ:значение»");s(d,p)},$$slots:{default:!0}});var _=e(h,2);n(_,{children:(d,l)=>{o();var p=a("Данные разделены запятыми");s(d,p)},$$slots:{default:!0}});var f=e(_,2);n(f,{children:(d,l)=>{o();var p=a("Объект находится внутри фигурных скобок {}");s(d,p)},$$slots:{default:!0}});var m=e(f,2);n(m,{children:(d,l)=>{o();var p=a("Массив — внутри квадратных []");s(d,p)},$$slots:{default:!0}}),s(r,t)},$$slots:{default:!0}});var L=e(B,2),j=u(L),ce=u(j);P(ce,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/670/2bb/754/6702bb754535cfc309d67d148c12928c.png",style:"width: 100%;"}),$(j),$(L);var I=e(L,2);g(I,{id:"dataKeyValue",children:(r,c)=>{var t=me();s(r,t)},$$slots:{default:!0}});var V=e(I,4);i(V,{code:'"name":"Ольга"',hideCopyButton:!0,showMoreLess:!1});var k=e(V,6);i(k,{code:"123",hideCopyButton:!0,showMoreLess:!1});var A=e(k,4);i(A,{code:'"Ольга"',hideCopyButton:!0,showMoreLess:!1});var q=e(A,6);g(q,{id:"Separation",children:(r,c)=>{var t=ye();s(r,t)},$$slots:{default:!0}});var R=e(q,6);i(R,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(r,c)=>{o();var t=a();t.nodeValue=`{
  "query": "Виктор Иван",
  "count": 7,
}`,s(r,t)},$$slots:{default:!0}});var O=e(R,2),F=u(O),ue=u(F);P(ue,{src:"https://habrastorage.org/getpro/habr/upload_files/79f/1e6/28e/79f1e628e9052de5ca240b6f23e8c1b1.png",style:"width: 100%;"}),$(F),$(O);var E=e(O,6);i(E,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(r,c)=>{o();var t=a();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван"
}`,s(r,t)},$$slots:{default:!0}});var K=e(E,6);b(K,{style:"margin-left: 3.5em;",children:(r,c)=>{var t=ge(),h=y(t);n(h,{children:(l,p)=>{o();var v=a("У меня уже есть работающий запрос в Postman-е. Но в нем минимум полей.");s(l,v)},$$slots:{default:!0}});var _=e(h,2);n(_,{children:(l,p)=>{o();var v=a("Я его клонирую");s(l,v)},$$slots:{default:!0}});var f=e(_,2);n(f,{children:(l,p)=>{o();var v=a("Копирую из документации нужное мне поле. Оно в примере не последнее, так что идёт с запятой на конце.");s(l,v)},$$slots:{default:!0}});var m=e(f,2);n(m,{children:(l,p)=>{o();var v=a("Вставляю себе в конце запроса — в текущий конец добавляю запятую, потом вставляю новую строку.");s(l,v)},$$slots:{default:!0}});var d=e(m,2);n(d,{children:(l,p)=>{o();var v=a("Отправляю запрос — ой, ошибка! Из копипасты то запятую не убрала!");s(l,v)},$$slots:{default:!0}}),s(r,t)},$$slots:{default:!0}});var J=e(K,4),T=u(J),$e=u(T);P($e,{src:"https://habrastorage.org/getpro/habr/upload_files/5c8/324/d1d/5c8324d1d3a8e98eec2d14ea9b021acc.png",style:"width: 100%;"}),$(T),$(J);var G=e(J,8);i(G,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(r,c)=>{o();var t=a();t.nodeValue=`{
  "count": 7;
  "query": "Виктор Иван"
}`,s(r,t)},$$slots:{default:!0}});var W=e(G,4);i(W,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(r,c)=>{o();var t=a();t.nodeValue=`{
  "count": 7,
  "query": "Виктор Иван",
}`,s(r,t)},$$slots:{default:!0}});var X=e(W,4);i(X,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(r,c)=>{o();var t=a();t.nodeValue=`{
  "count": 7
  "query": "Виктор Иван"
}`,s(r,t)},$$slots:{default:!0}});var z=e(X,4);i(z,{type:"multi",hideCopyButton:!0,showMoreLess:!1,children:(r,c)=>{o();var t=a();t.nodeValue=`
[1, 2, 3, 4, 5] <!-- корректный массив на 5 элементов* -->
[1; 2; 3; 4; 5] <!-- некорректный массив, так как такого разделителя быть не должно. Это может быть простой строкой, но тогда нужны кавычки -->!
`,s(r,t)},$$slots:{default:!0}});var D=e(z,4);g(D,{id:"object",children:(r,c)=>{var t=Pe();s(r,t)},$$slots:{default:!0}});var H=e(D,4);i(H,{code:"{a: 1, b: 2}",hideCopyButton:!0,showMoreLess:!1});var Q=e(H,4);i(Q,{code:"{a: 1, b: 2",hideCopyButton:!0,showMoreLess:!1});var U=e(Q,4);i(U,{code:"a: 1, b: 2;}",hideCopyButton:!0,showMoreLess:!1});var Y=e(U,4);i(Y,{code:"[ a: 1, b: 2 ]",hideCopyButton:!0,showMoreLess:!1});var C=e(Y,4),Z=u(C),he=u(Z);P(he,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/8d6/af6/6cc/8d6af66cc1822c72b050735bf0ab9c40.png",style:"width: 100%;"}),$(Z),$(C);var ee=e(C,2);g(ee,{id:"array",children:(r,c)=>{var t=be();s(r,t)},$$slots:{default:!0}});var te=e(ee,4);i(te,{code:"[1, 2]",hideCopyButton:!0,showMoreLess:!1});var se=e(te,4);i(se,{code:"[1, 2",hideCopyButton:!0,showMoreLess:!1});var re=e(se,4);i(re,{code:"1, 2]",hideCopyButton:!0,showMoreLess:!1});var oe=e(re,4);i(oe,{code:"{ 1, 2 }",hideCopyButton:!0,showMoreLess:!1});var le=e(oe,4);g(le,{id:"output",children:(r,c)=>{var t=xe();s(r,t)},$$slots:{default:!0}});var N=e(le,4),ae=u(N),_e=u(ae);P(_e,{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/c39/e9f/345/c39e9f3453f63e43c3f1b8d0a276f5b6.png",style:"width: 100%;"}),$(ae),$(N);var pe=e(N,4);b(pe,{style:"margin-left: 3.5em;",children:(r,c)=>{var t=Se(),h=y(t);n(h,{children:(l,p)=>{o();var v=a("JSON-объект — неупорядоченное множество пар «ключ:значение», заключённое в фигурные скобки «{ }».");s(l,v)},$$slots:{default:!0}});var _=e(h,2);n(_,{children:(l,p)=>{o();var v=a("Массив — упорядоченный набор значений, разделенных запятыми. Находится внутри квадратных скобок [].");s(l,v)},$$slots:{default:!0}});var f=e(_,2);n(f,{children:(l,p)=>{o();var v=a("Число (целое или вещественное).");s(l,v)},$$slots:{default:!0}});var m=e(f,2);n(m,{children:(l,p)=>{o();var v=a("Литералы true (логическое значение «истина»), false (логическое значение «ложь») и null.");s(l,v)},$$slots:{default:!0}});var d=e(m,2);n(d,{children:(l,p)=>{o();var v=a("Строка");s(l,v)},$$slots:{default:!0}}),s(r,t)},$$slots:{default:!0}});var fe=e(pe,8);b(fe,{style:"margin-left: 3.5em;",children:(r,c)=>{var t=Le(),h=y(t);n(h,{children:(d,l)=>{o();var p=a("Данные в объекте написаны в виде пар «ключ:значение»");s(d,p)},$$slots:{default:!0}});var _=e(h,2);n(_,{children:(d,l)=>{o();var p=a("Данные в объекте или массиве разделены запятыми");s(d,p)},$$slots:{default:!0}});var f=e(_,2);n(f,{children:(d,l)=>{o();var p=a("Объект находится внутри фигурных скобок {}");s(d,p)},$$slots:{default:!0}});var m=e(f,2);n(m,{children:(d,l)=>{o();var p=a("Массив — внутри квадратных []");s(d,p)},$$slots:{default:!0}}),s(r,t)},$$slots:{default:!0}}),s(ve,M)}export{Ae as component};
